// build.gradle (cache-safe JavaFX 24 on JDK 24)
// Plugin-free, portable, configuration-cache friendly.
// Usage:
//   ./gradlew --refresh-dependencies clean run --configuration-cache
//   ./gradlew run --configuration-cache

plugins {
    id 'application'
}

repositories { mavenCentral() }

// ---- JavaFX version / platform detection ----
def javafxVersion = '25'

def os = System.getProperty('os.name').toLowerCase()
def javafxPlatform =
        os.contains('win')   ? 'win'   :
        os.contains('mac')   ? 'mac'   :
        os.contains('linux') ? 'linux' :
        { throw new GradleException("Unsupported OS: " + os) }()

// Only include the modules you actually use
def javafxModules = ['javafx-base', 'javafx-graphics', 'javafx-controls', 'javafx-fxml']

// Convert to --add-modules format: e.g., "javafx.base,javafx.graphics,javafx.controls,javafx.fxml"
def javafxAddModules = javafxModules.collect { 'javafx.' + (it - 'javafx-') }.join(',')

java {
    toolchain { languageVersion = JavaLanguageVersion.of(25) }
}

// Dedicated configuration holding platform-specific JavaFX artifacts (classes + natives for your OS)
configurations {
    javafx
    implementation.extendsFrom(javafx)   // <-- add this
    // (optional) testImplementation.extendsFrom(javafx)
}

dependencies {
    // Pull platform-specific artifacts (contain classes + natives) into the javafx configuration
    javafxModules.each { m ->
        javafx "org.openjfx:${m}:${javafxVersion}:${javafxPlatform}"
    }
    
    // SQLite JDBC driver
    implementation 'org.xerial:sqlite-jdbc:3.46.1.3'
    
    // Password hashing library
    implementation 'org.mindrot:jbcrypt:0.4'
}

application {
    // CHANGE if your main class is different
    mainClass.set("com.birdsenger.BirdSengerApp")

    // Updated JVM args to fix SQLite native access warning and JavaFX
    applicationDefaultJvmArgs = [
        "--sun-misc-unsafe-memory-access=allow", 
        "--enable-native-access=javafx.graphics",
        "--enable-native-access=ALL-UNNAMED"
    ]
}

// Feed JavaFX to the compiler via --module-path (no module-info.java required)
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
        '--module-path', configurations.javafx.asPath,
        '--add-modules', javafxAddModules
    ]
}

// Ensure :run uses JDK 24 toolchain and same module-path
tasks.named('run', JavaExec).configure {
    javaLauncher = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(25) }
    jvmArgs += [
        '--module-path', configurations.javafx.asPath,
        '--add-modules', javafxAddModules
    ]
}
