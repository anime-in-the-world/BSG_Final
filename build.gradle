// build.gradle (cache-safe JavaFX 25 on JDK 25)
// Plugin-free, portable, configuration-cache friendly.

plugins {
    id 'application'
}

repositories { mavenCentral() }

// ---- JavaFX version / platform detection ----
def javafxVersion = '25'

def os = System.getProperty('os.name').toLowerCase()
def javafxPlatform =
        os.contains('win')   ? 'win'   :
                os.contains('mac')   ? 'mac'   :
                        os.contains('linux') ? 'linux' :
                                { throw new GradleException("Unsupported OS: " + os) }()

// Only include the modules you actually use
def javafxModules = ['javafx-base', 'javafx-graphics', 'javafx-controls', 'javafx-fxml']

// Convert to --add-modules format
def javafxAddModules = javafxModules.collect { 'javafx.' + (it - 'javafx-') }.join(',')

java {
    toolchain { languageVersion = JavaLanguageVersion.of(25) }
}

// Dedicated configuration holding platform-specific JavaFX artifacts
configurations {
    javafx
    implementation.extendsFrom(javafx)
}

dependencies {
    // Pull platform-specific artifacts
    javafxModules.each { m ->
        javafx "org.openjfx:${m}:${javafxVersion}:${javafxPlatform}"
    }

    // SQLite JDBC driver
    implementation 'org.xerial:sqlite-jdbc:3.46.1.3'

    // Password hashing library
    implementation 'org.mindrot:jbcrypt:0.4'

    // JSON Processing - GSON
    implementation 'com.google.code.gson:gson:2.10.1'
}

application {
    mainClass.set("com.birdsenger.BirdSengerApp")

    applicationDefaultJvmArgs = [
            "--sun-misc-unsafe-memory-access=allow",
            "--enable-native-access=javafx.graphics",
            "--enable-native-access=ALL-UNNAMED"
    ]
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '--module-path', configurations.javafx.asPath,
            '--add-modules', javafxAddModules
    ]
}

tasks.named('run', JavaExec).configure {
    javaLauncher = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(25) }
    jvmArgs += [
            '--module-path', configurations.javafx.asPath,
            '--add-modules', javafxAddModules
    ]
}


// Add this after the existing 'run' task configuration
task runServer(type: JavaExec) {
    group = 'application'
    description = 'Run BirdSenger Server'
    mainClass = 'com.birdsenger.server.ServerRunner'
    classpath = sourceSets.main.runtimeClasspath

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(25)
    }
}



jar {
    manifest {
        attributes 'Main-Class': 'com.birdsenger.server.ServerRunner'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}